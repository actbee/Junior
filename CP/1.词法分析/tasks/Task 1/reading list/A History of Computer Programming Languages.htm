<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="author" content="Andrew Ferguson" />
	<link href="stylesheet.css" rel="stylesheet" type="text/css" media="screen" />
	<link rel="shortcut icon" href="http://www.brown.edu/favicon.ico" />
  <title>A History of Computer Programming Languages</title>
  <!--Copyright 2000 Andrew Ferguson-->

  <style type="text/css"><!--
	h2 {
		font-family: palatino,georgia,serif;
		text-align: center;
		margin-top: 2em;
		margin-bottom: 2em
		color: #222222;
	}
	  p {
		  font-family: palatino,georgia,serif;
		  font-size: 11pt;
		  line-height: 14pt;
		  text-indent: 2.7em;
	  }
	  ul {
		  font-family: palatino,georgia,serif;
		  font-size: 11pt;
		  line-height: 14pt;
	  }
	--></style>
  
</head>
<body>

<div class="main">

<br />

<em>This history was written in the spring of 2000 when I was in <a href="http://www.prs.k12.nj.us/">eighth grade</a>. For several years after I wrote it, the text was available online and it became a reference for other articles, Wikipedia entries, and even college courses. I have placed the report here for posterity and amusement (how could I have possibly left out Python??). In 2004, I made two updates in response to e-mailed criticisms, but the text is otherwise unchanged. For a more up-to-date reference, I shamelessly point you <a href="http://en.wikipedia.org/wiki/History_of_programming_languages">to Wikipedia</a>.<br />&mdash; <a href="home.html">Andrew Ferguson</a></em>

<br /><br />

<hr />

<h2><i>A History of Computer Programming Languages</i></h2>

<p>Ever since the invention of Charles
Babbage&rsquo;s difference engine in 1822, computers have required a means of
instructing them to perform a specific task. This means is known as a
programming language. Computer languages were first composed of a series of
steps to wire a particular program; these morphed into a series of steps keyed
into the computer and then executed; later these languages acquired advanced
features such as logical branching and object orientation. The computer
languages of the last fifty years have come in two stages, the first major
languages and the second major languages, which are in use today.</p>
<p>In the beginning, Charles Babbage&rsquo;s
difference engine could only be made to execute tasks by changing the gears
which executed the calculations. Thus, the earliest form of a computer
language was physical motion. Eventually, physical motion was replaced by
electrical signals when the US Government built the ENIAC in 1942. It followed
many of the same principles of Babbage&rsquo;s engine and hence, could only be
&ldquo;programmed&rdquo; by presetting switches and rewiring the entire system for each
new &ldquo;program&rdquo; or calculation. This process proved to be very tedious.</p>
<p>In 1945, John Von Neumann was
working at the Institute for Advanced Study. He developed two important
concepts that directly affected the path of computer programming languages.
The first was known as &ldquo;shared-program technique&rdquo; (www.softlord.com). This
technique stated that the actual computer hardware should be simple and not
need to be hand-wired for each program. Instead, complex instructions should
be used to control the simple hardware, allowing it to be reprogrammed much
faster.</p>
<p>The second concept was also
extremely important to the development of programming languages. Von Neumann
called it &ldquo;conditional control transfer&rdquo; (www.softlord.com). This idea gave
rise to the notion of subroutines, or small blocks of code that could be
jumped to in any order, instead of a single set of chronologically ordered
steps for the computer to take. The second part of the idea stated that
computer code should be able to branch based on logical statements such as IF
(expression) THEN, and looped such as with a FOR statement. &ldquo;Conditional
control transfer&rdquo; gave rise to the idea of &ldquo;libraries,&rdquo; which are blocks of
code that can be reused over and over. <i>(Updated Aug 1 2004: Around this time, 
Konrad Zuse, a German, was inventing his own computing systems independently 
and developed many of the same concepts, both in his machines and in the 
Plankalkul programming language. Alas, his work did not become widely known 
until much later. For more information, see this website: 
<a href="http://www.epemag.com/zuse/">http://www.epemag.com/zuse/</a>, or the 
entries on Wikipedia: <a href="http://en.wikipedia.org/wiki/Konrad_Zuse">Konrad Zuse</a> and 
<a href="http://en.wikipedia.org/wiki/Plankalk%FCl">Plankalkul</a>.)</i></p>
<p>In 1949, a few years after Von Neumann&rsquo;s work, the language Short Code
appeared (www.byte.com). It was the first computer language for electronic
devices and it required the programmer to change its statements into 0&rsquo;s and
1&rsquo;s by hand. Still, it was the first step towards the complex languages of
today. In 1951, Grace Hopper wrote the first compiler, A-0 (www.byte.com). A
compiler is a program that turns the language&rsquo;s statements into 0&rsquo;s and 1&rsquo;s
for the computer to understand. This lead to faster programming, as the
programmer no longer had to do the work by hand.</p>
<p>In 1957, the first of the major languages appeared in the form of
FORTRAN. Its name stands for FORmula TRANslating system. The language was
designed at IBM for scientific computing. The components were very simple, and
provided the programmer with low-level access to the computers innards. Today,
this language would be considered restrictive as it only included IF, DO, and
GOTO statements, but at the time, these commands were a big step forward. The
basic types of data in use today got their start in FORTRAN, these included
logical variables (TRUE or FALSE), and integer, real, and double-precision
numbers.</p>
<p>Though FORTAN was good at handling
numbers, it was not so good at handling input and output, which mattered most
to business computing. Business computing started to take off in 1959, and
because of this, COBOL was developed. It was designed from the ground up as
the language for businessmen. Its only data types were numbers and strings of
text. It also allowed for these to be grouped into arrays and records, so that
data could be tracked and organized better. It is interesting to note that a
COBOL program is built in a way similar to an essay, with four or five major
sections that build into an elegant whole. COBOL statements also have a very
English-like grammar, making it quite easy to learn. All of these features
were designed to make it easier for the average business to learn and adopt
it.</p>
<p><i>(Updated Aug 11 2004)</i> In 1958, John McCarthy of MIT
created the LISt Processing (or LISP) language. It was designed for Artificial
Intelligence (AI) research. Because it was designed for a specialized field, the
original release of LISP had a unique syntax: essentially none. Programmers wrote
code in parse trees, which are usually a compiler-generated intermediary between
higher syntax (such as in C or Java) and lower-level code. Another obvious
difference between this language (in original form) and other languages is that
the basic and only type of data is the list; in the mid-1960&rsquo;s, LISP acquired
other data types. A LISP list is denoted by a sequence of items enclosed by
parentheses. LISP programs themselves are written as a set of lists, so that
LISP has the unique ability to modify itself, and hence grow on its own. The
LISP syntax was known as &ldquo;Cambridge Polish,&rdquo; as it was very different from
standard Boolean logic (Wexelblat, 177):</p>
<ul style="margin-left: 20%; margin-right: auto; list-style-type: none">
<li>x V y  - Cambridge Polish, what was used to describe the LISP program</li>
<li>OR(x,y) - parenthesized prefix notation, what was used in the LISP program</li>
<li>x OR y - standard Boolean logic</li>
</ul>
<p style="text-indent: 0px">LISP remains in use today because its highly specialized and abstract
nature.</p>
<p>The Algol language was created by a
committee for scientific use in 1958. It&rsquo;s major contribution is being the
root of the tree that has led to such languages as Pascal, C, C++, and Java.
It was also the first language with a formal grammar, known as Backus-Naar
Form or BNF (<i>McGraw-Hill Encyclopedia of Science and Technology</i>, 454). Though
Algol implemented some novel concepts, such as recursive calling of functions,
the next version of the language, Algol 68, became bloated and difficult to
use (www.byte.com). This lead to the adoption of smaller and more compact
languages, such as Pascal.</p>
<p>Pascal was begun in 1968 by Niklaus
Wirth. Its development was mainly out of necessity for a good teaching tool.
In the beginning, the language designers had no hopes for it to enjoy
widespread adoption. Instead, they concentrated on developing good tools for
teaching such as a debugger and editing system and support for common early
microprocessor machines which were in use in teaching institutions.</p>
<p>Pascal was designed in a very
orderly approach, it combined many of the best features of the languages in
use at the time, COBOL, FORTRAN, and ALGOL. While doing so, many of the
irregularities and oddball statements of these languages were cleaned up,
which helped it gain users (Bergin, 100-101). The combination of features,
input/output <i>and</i> solid mathematical features, made it a highly successful
language. Pascal also improved the &ldquo;pointer&rdquo; data type, a very powerful
feature of any language that implements it. It also added a CASE statement,
that allowed instructions to to branch like a tree in such a manner:</p>
<pre style="margin-left: 25%; margin-right: auto;">
CASE <i>expression</i> OF
   <i>possible-expression-value-1</i>:
       <i>statements to execute</i>...
   <i>possible-expression-value-2</i>:
       <i>statements to execute</i>...
END
</pre>
<p style="text-indent: 0px">Pascal also helped the development of dynamic variables, which could be
created while a program was being run, through the NEW and DISPOSE commands.
However, Pascal did not implement dynamic arrays, or groups of variables,
which proved to be needed and led to its downfall (Bergin, 101-102). Wirth
later created a successor to Pascal, Modula-2, but by the time it appeared, C
was gaining popularity and users at a rapid pace.</p>
<p>C was developed in 1972 by Dennis
Ritchie while working at Bell Labs in New Jersey. The transition in usage from
the first major languages to the major languages of today occurred with the
transition between Pascal and C. Its direct ancestors are B and BCPL, but its
similarities to Pascal are quite obvious. All of the features of Pascal,
including the new ones such as the CASE statement are available in C. C uses
pointers extensively and was built to be fast and powerful at the expense of
being hard to read. But because it fixed most of the mistakes Pascal had, it
won over former-Pascal users quite rapidly.</p>
<p>Ritchie developed C for the new Unix
system being created at the same time. Because of this, C and Unix go hand in
hand. Unix gives C such advanced features as dynamic variables, multitasking,
interrupt handling, forking, and strong, low-level, input-output. Because of
this, C is very commonly used to program operating systems such as Unix,
Windows, the MacOS, and Linux.</p>
<p>In the late 1970&rsquo;s and early 1980&rsquo;s,
a new programing method was being developed. It was known as Object Oriented
Programming, or OOP. Objects are pieces of data that can be packaged and
manipulated by the programmer. Bjarne Stroustroup liked this method and
developed extensions to C known as &ldquo;C With Classes.&rdquo; This set of extensions
developed into the full-featured language C++, which was released in 1983.</p>
<p>C++ was designed to organize the raw
power of C using OOP, but maintain the speed of C and be able to run on many
different types of computers. C++ is most often used in simulations, such as
games. C++ provides an elegant way to track and manipulate hundreds of
instances of people in elevators, or armies filled with different types of
soldiers. It is the language of choice in today&rsquo;s AP Computer Science
courses.</p>
<p>In the early 1990&rsquo;s, interactive TV
was the technology of the future. Sun Microsystems decided that interactive TV
needed a special, portable (can run on many types of machines), language. This
language eventually became Java. In 1994, the Java project team changed their
focus to the web, which was becoming &ldquo;the cool thing&rdquo; after interactive TV
failed. The next year, Netscape licensed Java for use in their internet
browser, Navigator. At this point, Java became the language of the future and
several companies announced applications which would be written in Java, none
of which came into use. </p>
<p>Though Java has very lofty goals and
is a text-book example of a good language, it may be the &ldquo;language that
wasn&rsquo;t.&rdquo; It has serious optimization problems, meaning that programs written
in it run very slowly. And Sun has hurt Java&rsquo;s acceptance by engaging in
political battles over it with Microsoft. But Java may wind up as the
instructional language of tomorrow as it is truly object-oriented and
implements advanced techniques such as true portability of code and garbage
collection.</p>
<p>Visual Basic is often taught as a
first programming language today as it is based on the BASIC language
developed in 1964 by John Kemeny and Thomas Kurtz. BASIC is a very limited
language and was designed for non-computer science people. Statements are
chiefly run sequentially, but program control can change based on IF..THEN,
and GOSUB statements which execute a certain block of code and then return to
the original point in the program&rsquo;s flow.</p>
<p>Microsoft has extended BASIC in its
Visual Basic (VB) product. The heart of VB is the form, or blank window on
which you drag and drop components such as menus, pictures, and slider bars.
These items are known as &ldquo;widgets.&rdquo; Widgets have properties (such as its
color) and events (such as clicks and double-clicks) and are central to
building any user interface today in any language. VB is most often used today
to create quick and simple interfaces to other Microsoft products such as
Excel and Access without needing a lot of code, though it is possible to
create full applications with it.</p>
<p>Perl has often been described as the
&ldquo;duct tape of the Internet,&rdquo; because it is most often used as the engine for a
web interface or in scripts that modify configuration files. It has very
strong text matching functions which make it ideal for these tasks. Perl was
developed by Larry Wall in 1987 because the Unix sed and awk tools (used for
text manipulation) were no longer strong enough to support his needs.
Depending on whom you ask, Perl stands for Practical Extraction and Reporting
Language or Pathologically Eclectic Rubbish Lister.</p>
<p>Programming languages have been
under development for years and will remain so for many years to come. They
got their start with a list of steps to wire a computer to perform a task.
These steps eventually found their way into software and began to acquire
newer and better features. The first major languages were characterized by the
simple fact that they were intended for one purpose and one purpose only,
while the languages of today are differentiated by the way they are programmed
in, as they can be used for almost any purpose. And perhaps the languages of
tomorrow will be more natural with the invention of quantum and biological
computers.</p>

<h3>Bibliography</h3>

<ul>
	<li>&ldquo;A Brief History of Programming Languages.&rdquo; <a href="http://www.byte.com/art/9509/se7/artl9.htm">http://www.byte.com/art/9509/se7/artl9.htm</a>. Cited, March 25, 2000.</li>

	<li>&ldquo;A Short History of the Computer.&rdquo; <a href="http://www.softlord.com/comp/">http://www.softlord.com/comp/</a>. Jeremy Myers. Cited, March 25, 2000.</li>

	<li>Bergin, Thomas J. and Richard G. Gibson, eds. <i>History of Programming Languages-II</i>. New York: ACM Press, 1996.</li>

	<li>Christiansen, Tom and Nathan Torkington. <i>Perlfaq1 Unix Manpage</i>. Perl 5 Porters, 1997-1999.</li>

	<li>Christiansen, Tom and Nathan Torkington. <i>Perlhist Unix Manpage</i>. Perl 5 Porters, 1997-1999.</li>

	<li>&ldquo;Java History.&rdquo; <a href="http://ils.unc.edu/blaze/java/javahist.html">http://ils.unc.edu/blaze/java/javahist.html</a>. Cited, March 29, 2000.</li>

	<li>&ldquo;Programming Languages.&rdquo; <i>McGraw-Hill Encyclopedia of Science and Technology</i>. New York: McGraw-Hill, 1997.</li>

	<li>Wexelblat, Richard L., ed. <i>History of Programming Languages</i>. New York: Academic Press, 1981.</li>
</ul>

</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-12698422-1");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
</html>
